// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String?   @unique
  name              String?
  gmailAccessToken  String? // OAuth token for Gmail API
  gmailRefreshToken String? // Refresh token for Gmail API
  tokenExpiresAt    DateTime? // Token expiration timestamp
  profilePicture    String?
  // Remove classificationPrompt field - we'll use UserPreference.customPrompt instead

  // Relationships
  emails          Email[]
  labels          Label[]
  preference      UserPreference?
  processingStats ProcessingStats[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  password      String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Email {
  id            String   @id @default(cuid())
  gmailId       String   @unique // Gmail API message ID
  subject       String?
  snippet       String? // Short preview (not full content for privacy)
  sender        String
  receivedAt    DateTime
  isRead        Boolean  @default(false)
  isPrioritized Boolean  @default(false) // Part of Top 20
  category      String?  // Add this field for classification
  categoryConfidence Float? // Add this field for confidence score

  // Relationships
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  labels EmailLabel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gmailId])
  @@index([userId, category])
  @@index([userId, receivedAt])
}

model Label {
  id           String  @id @default(uuid())
  name         String
  color        String?
  gmailLabelId String? // ID of the corresponding Gmail label
  description  String?
  isDefault    Boolean @default(false)

  // Relationships
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  emails EmailLabel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model EmailLabel {
  email   Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId String
  label   Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId String
  addedAt DateTime @default(now())

  @@id([emailId, labelId])
}

model UserPreference {
  id                  String  @id @default(uuid())
  customPrompt        String? @db.Text // Classification instructions
  prioritySenders     String? // JSON array of important senders
  ignoredSenders      String? // JSON array of senders to ignore
  contentKeywords     String? // JSON array of important keywords
  processingFrequency String  @default("HOURLY") // HOURLY, DAILY, CUSTOM
  processingSchedule  String? // JSON format for custom scheduling

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProcessingStats {
  id              String    @id @default(uuid())
  batchId         String    @unique // Processing batch identifier
  startTime       DateTime
  endTime         DateTime?
  emailsProcessed Int       @default(0)
  successCount    Int       @default(0)
  errorCount      Int       @default(0)
  tokensUsed      Int       @default(0) // API usage tracking
  status          String // PENDING, PROCESSING, COMPLETED, FAILED

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, startTime])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// New model for detailed classification records
model EmailClassification {
  id           String   @id @default(cuid())
  emailId      String
  userId       String
  category     String
  confidence   Float    @default(0)
  reason       String?  @db.Text
  classifiedAt DateTime @default(now())
  feedback     String?  // For user feedback on classification accuracy

  @@unique([emailId, userId])
  @@index([userId, category])
  @@index([classifiedAt])
}
